{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "id": 42,
  "iteration": 1620985725683,
  "links": [],
  "panels": [
    {
      "datasource": null,
      "fieldConfig": {
        "defaults": {
          "custom": {
            "align": null,
            "filterable": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Start"
            },
            "properties": [
              {
                "id": "unit",
                "value": "dateTimeAsLocal"
              },
              {
                "id": "custom.width",
                "value": 170
              },
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "d/FkUpJpQZk/trip?orgId=1&from=${__data.fields.start_date_ts}&to=${__data.fields.end_date_ts}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SoC"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 70
              },
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "SoC Diff"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 70
              },
              {
                "id": "unit",
                "value": "percent"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "start_path"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "end_path"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Action"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "kWh"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              },
              {
                "id": "unit",
                "value": "kwatth"
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "End"
            },
            "properties": [
              {
                "id": "unit",
                "value": "dateTimeAsLocal"
              },
              {
                "id": "custom.width",
                "value": 152
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Duration"
            },
            "properties": [
              {
                "id": "unit",
                "value": "m"
              },
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Start Address"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Create or edit geo-fence",
                    "url": "[[base_url:raw]]/geo-fences/${__data.fields.start_path}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "End Address"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "Create or edit geo-fence",
                    "url": "[[base_url:raw]]/geo-fences/${__data.fields.end_path}"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "start_date_ts"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "end_date_ts"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "odometer_km"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.*_km/"
            },
            "properties": [
              {
                "id": "unit",
                "value": "km"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.*_mi/"
            },
            "properties": [
              {
                "id": "unit",
                "value": "mi"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.*_c/"
            },
            "properties": [
              {
                "id": "unit",
                "value": "celsius"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/.*_f/"
            },
            "properties": [
              {
                "id": "unit",
                "value": "fahrenheit"
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/odometer_.*/"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Odometer"
              },
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/distance_.*/"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Distance"
              },
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/range_diff_.*/"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Range Diff"
              },
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/outside_temp_avg_.*/"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Temperature"
              },
              {
                "id": "custom.width",
                "value": 100
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 22,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 2,
      "options": {
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "Start"
          }
        ]
      },
      "pluginVersion": "7.5.4",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\r\n\tstart_date AS \"Start\",\r\n\tend_date AS \"End\",\r\n\tROUND(EXTRACT(EPOCH FROM start_date))*1000 AS start_date_ts,\r\n\tROUND(EXTRACT(EPOCH FROM end_date))*1000 AS end_date_ts,\r\n\t'🚗 Drive' AS \"Action\",\r\n\tdrives.duration_min AS \"Duration\",\r\n\tCASE WHEN start_geofence_id IS NULL THEN CONCAT('new?lat=', TP1.latitude, '&lng=', TP1.longitude)\r\n\t\tWHEN start_geofence_id IS NOT NULL THEN CONCAT(start_geofence_id, '/edit')\r\n\tEND AS start_path,\r\n\tCASE WHEN end_geofence_id IS NULL THEN CONCAT('new?lat=', TP2.latitude, '&lng=', TP2.longitude)\r\n\t\tWHEN start_geofence_id IS NOT NULL THEN CONCAT(end_geofence_id, '/edit')\r\n\tEND AS end_path,\r\n\tCOALESCE(start_geofence.name, CONCAT_WS(', ', COALESCE(start_address.name, nullif(CONCAT_WS(' ', start_address.road, start_address.house_number), '')), start_address.city)) AS \"Start Address\",\r\n\tCOALESCE(end_geofence.name, CONCAT_WS(', ', COALESCE(end_address.name, nullif(CONCAT_WS(' ', end_address.road, end_address.house_number), '')), end_address.city)) AS \"End Address\",\r\n\tconvert_km(TP1.odometer::INTEGER, '$length_unit') AS odometer_$length_unit,\r\n\tconvert_km(distance::INTEGER, '$length_unit') AS distance_$length_unit,\r\n\tconvert_km((end_[[preferred_range]]_range_km - start_[[preferred_range]]_range_km)::INTEGER, '$length_unit') * cars.efficiency AS \"kWh\",\r\n\tconvert_km((end_[[preferred_range]]_range_km - start_[[preferred_range]]_range_km)::INTEGER, '$length_unit') AS range_diff_$length_unit,\r\n\tTP2.battery_level AS \"SoC\",\r\n\tTP2.battery_level-TP1.battery_level AS \"SoC Diff\",\r\n\toutside_temp_avg AS outside_temp_avg_$temp_unit\r\nFROM drives\r\n\tLEFT OUTER JOIN positions AS TP1 on drives.start_position_id = TP1.id\r\n\tLEFT OUTER JOIN positions AS TP2 on drives.end_position_id = TP2.id\r\n\tLEFT JOIN addresses start_address ON start_address_id = start_address.id\r\n\tLEFT JOIN addresses end_address ON  end_address_id = end_address.id\r\n\tLEFT JOIN geofences start_geofence ON start_geofence_id = start_geofence.id\r\n\tLEFT JOIN geofences end_geofence ON end_geofence_id = end_geofence.id\r\n\tJOIN cars ON cars.id = drives.car_id\r\nWHERE \r\n\t$__timeFilter(drives.start_date)\r\n\tAND\tdrives.car_id = $car_id\r\n\tAND\t'🚗 Drive' in ($action_filter)\r\n\tAND\t('Start Address' like '%$text_filter%' or 'End Address' like '%$text_filter%')\r\n\r\nUNION\r\nSELECT\r\n\tstart_date AS \"Start\",\r\n\tend_date AS \"End\",\r\n\tROUND(EXTRACT(EPOCH FROM start_date))*1000 AS start_date_ts,\r\n\tROUND(EXTRACT(EPOCH FROM end_date))*1000 AS end_date_ts,\r\n\t'🔋 charges' AS \"Action\",\r\n\tcharging_processes.duration_min AS \"Duration\",\r\n\tCASE WHEN geofence_id IS NULL THEN CONCAT('new?lat=', address.latitude, '&lng=', address.longitude)\r\n\t\tWHEN geofence_id IS NOT NULL THEN CONCAT(geofence_id, '/edit')\r\n\tEND AS start_path,\r\n\tnull AS end_path,\r\n\tCOALESCE(geofence.name, CONCAT_WS(', ', COALESCE(address.name, nullif(CONCAT_WS(' ', address.road, address.house_number), '')), address.city)) AS \"Start Address\",\r\n\t'' AS \"End Address\",\r\n\tconvert_km(position.odometer::INTEGER, '$length_unit') AS odometer_$length_unit,\r\n\tnull AS distance_$length_unit,\r\n\tconvert_km((end_[[preferred_range]]_range_km - start_[[preferred_range]]_range_km)::INTEGER, '$length_unit') * cars.efficiency AS \"kWh\",\r\n\tconvert_km((end_[[preferred_range]]_range_km - start_[[preferred_range]]_range_km)::INTEGER, '$length_unit') AS range_diff_$length_unit, \r\n\tend_battery_level AS \"SoC\",\r\n\tend_battery_level - start_battery_level AS \"SoC Diff\",\r\n\toutside_temp_avg AS outside_temp_avg_$temp_unit\r\nFROM charging_processes\r\n\tINNER JOIN positions AS position ON position_id = position.id\r\n\tLEFT JOIN addresses address ON address_id = address.id\r\n\tLEFT JOIN geofences geofence ON geofence_id = geofence.id\r\n\tLEFT JOIN cars on cars.id = charging_processes.car_id\r\nWHERE\r\n\t$__timeFilter(charging_processes.start_date)\r\n\tAND charging_processes.car_id = $car_id\r\n\tAND '🔋 charges' in ($action_filter)\r\n\tAND\t('Start Address' like '%$text_filter%' or 'End Address' like '%$text_filter%')\r\n\r\n\r\nUNION\r\nSELECT\r\n\tT1.end_date AS \"Start\",\r\n\tT2.start_date AS \"End\",\r\n\tROUND(EXTRACT(EPOCH FROM T1.end_date)) * 1000 AS start_date_ts,\r\n\tROUND(EXTRACT(EPOCH FROM T2.start_date))*1000 AS end_date_ts,\r\n\t'🅿️ Parking' AS \"Action\",\r\n\tEXTRACT(EPOCH FROM T2.start_date - T1.end_date)/60 AS \"Duration\",\r\n\tCASE WHEN T1.end_geofence_id IS NULL THEN CONCAT('new?lat=', TP1.latitude, '&lng=', TP1.longitude)\r\n\t\tWHEN T1.end_geofence_id IS NOT NULL THEN CONCAT(T1.end_geofence_id, '/edit')\r\n\tEND AS start_path,\r\n\tnull AS end_path,\r\n\tCOALESCE(start_geofence.name, CONCAT_WS(', ', COALESCE(start_address.name, nullif(CONCAT_WS(' ', start_address.road, start_address.house_number), '')), start_address.city)) AS \"Start Address\",\r\n\t'' AS \"End Address\",\r\n\tconvert_km(TP1.odometer::INTEGER, '$length_unit') AS odometer_$length_unit,\r\n\tnull AS distance_$length_unit,\r\n\tconvert_km(((TP2.ideal_battery_range_km + (TP2.odometer - TP1.odometer)) - TP1.ideal_battery_range_km)::INTEGER, '$length_unit') * efficiency AS \"kWh\",\r\n\tconvert_km(((TP2.ideal_battery_range_km + (TP2.odometer - TP1.odometer)) - TP1.ideal_battery_range_km)::INTEGER, '$length_unit') AS range_diff_$length_unit,\r\n\tTP2.battery_level AS \"SoC\",\r\n\tTP2.battery_level-TP1.battery_level AS \"SoC Diff\",\r\n\tT1.outside_temp_avg AS outside_temp_avg_$temp_unit\r\nFROM\r\n\tdrives AS T1\r\n\tLEFT OUTER JOIN drives AS T2 on T1.id + 1 = T2.id\r\n\tLEFT OUTER JOIN positions AS TP1 on T1.end_position_id = TP1.id\r\n\tLEFT OUTER JOIN positions AS TP2 on T2.start_position_id = TP2.id\r\n\tLEFT JOIN addresses start_address ON T1.end_address_id = start_address.id\r\n\tLEFT JOIN addresses end_address ON T2.start_address_id = end_address.id\r\n\tLEFT JOIN geofences start_geofence ON T1.end_geofence_id = start_geofence.id\r\n\tLEFT JOIN geofences end_geofence ON T2.start_geofence_id = end_geofence.id\r\n\tJOIN cars ON cars.id = T2.car_id\r\nWHERE\r\n\t$__timeFilter(T1.end_date)\r\n\tAND T1.car_id=$car_id\r\n\tAND TP1.ideal_battery_range_km <> TP2.ideal_battery_range_km\r\n\tAND TP2.car_id=$car_id\r\n\tAND TP1.car_id=$car_id\r\n\tAND '🅿️ Parking' in ($action_filter)\r\n\tAND ('Start Address' like '%$text_filter%' or 'End Address' like '%$text_filter%')\r\n\r\nUNION\r\nSELECT\r\n\tT1.end_date AS \"Start\",\r\n\tT2.start_date AS \"End\",\r\n\tROUND(EXTRACT(EPOCH FROM T2.start_date)) * 1000 - 1 AS start_date_ts,\r\n\tROUND(EXTRACT(EPOCH FROM T2.start_date))*1000 - 1 AS end_date_ts,\r\n\t'❓ Missing' AS \"Action\",\r\n\tEXTRACT(EPOCH FROM T2.start_date - T1.end_date)/60 AS \"Duration\",\r\n\tCASE WHEN T1.end_geofence_id IS NULL THEN CONCAT('new?lat=', TP1.latitude, '&lng=', TP1.longitude)\r\n\t\tWHEN T1.end_geofence_id IS NOT NULL THEN CONCAT(T1.end_geofence_id, '/edit')\r\n\tEND AS start_path,\r\n\tCASE WHEN T2.start_geofence_id IS NULL THEN CONCAT('new?lat=', TP2.latitude, '&lng=', TP2.longitude)\r\n\t\tWHEN T2.start_geofence_id IS NOT NULL THEN CONCAT(T2.start_geofence_id, '/edit')\r\n\tEND AS end_path,\r\n\tCOALESCE(start_geofence.name, CONCAT_WS(', ', COALESCE(start_address.name, nullif(CONCAT_WS(' ', start_address.road, start_address.house_number), '')), start_address.city)) AS \"Start Address\",\r\n\tCOALESCE(end_geofence.name, CONCAT_WS(', ', COALESCE(end_address.name, nullif(CONCAT_WS(' ', end_address.road, end_address.house_number), '')), end_address.city)) AS \"End Address\",\r\n\tconvert_km(TP1.odometer::INTEGER, '$length_unit') AS odometer_$length_unit,\r\n\tconvert_km((TP2.odometer - TP1.odometer)::INTEGER, '$length_unit') AS distance_$length_unit,\r\n\tconvert_km(((TP2.ideal_battery_range_km + (TP2.odometer - TP1.odometer)) - TP1.ideal_battery_range_km)::INTEGER, '$length_unit')::INTEGER * efficiency AS \"kWh\",\r\n\tconvert_km(((TP2.ideal_battery_range_km + (TP2.odometer - TP1.odometer)) - TP1.ideal_battery_range_km)::INTEGER, '$length_unit') AS range_diff_$length_unit,\r\n\tTP2.battery_level AS \"SoC\",\r\n\tTP2.battery_level-TP1.battery_level AS \"SoC Diff\",\r\n\tT1.outside_temp_avg AS outside_temp_avg_$temp_unit\r\nFROM\r\n\tdrives AS T1\r\n\tLEFT OUTER JOIN drives AS T2 on T1.id + 1 = T2.id\r\n\tLEFT OUTER JOIN positions AS TP1 on T1.end_position_id = TP1.id\r\n\tLEFT OUTER JOIN positions AS TP2 on T2.start_position_id = TP2.id\r\n\tLEFT JOIN addresses start_address ON T1.end_address_id = start_address.id\r\n\tLEFT JOIN addresses end_address ON T2.start_address_id = end_address.id\r\n\tLEFT JOIN geofences start_geofence ON T1.end_geofence_id = start_geofence.id\r\n\tLEFT JOIN geofences end_geofence ON T2.start_geofence_id = end_geofence.id\r\n\tJOIN cars ON cars.id = T2.car_id\r\nWHERE\r\n\t$__timeFilter(T1.end_date)\r\n\tAND T1.car_id=$car_id \r\n\tAND T2.car_id=$car_id \r\n\tAND TP2.car_id=$car_id \r\n\tAND TP1.car_id=$car_id \r\n\tAND TP2.odometer - TP1.odometer > 0.5\r\n\tAND T1.end_address_id <> T2.start_address_id AND T1.end_geofence_id <> T2.start_geofence_id\r\n\tAND '❓ Missing' in ($action_filter)\r\n\tAND ('Start Address' like '%$text_filter%' or 'End Address' like '%$text_filter%')\r\n\r\nUNION\r\nSELECT\r\n\tstart_date AS \"Start\",\r\n\tstart_date AS \"End\",\r\n\tROUND(EXTRACT(EPOCH FROM start_date))*1000 AS start_date_ts, \r\n\tROUND(EXTRACT(EPOCH FROM start_date))*1000 AS end_date_ts, \r\n\t'💾 Update' AS \"Action\",\r\n\tnull AS distance_$length_unit,\r\n\tnull AS start_path,\r\n\tnull AS end_path,\r\n\tversion AS \"Start Address\",\r\n\t'' AS \"End Address\",\r\n\tnull AS odometer_$length_unit,\r\n\tnull AS \"Distance\", \r\n\tnull AS \"kWh\",\r\n\tnull AS range_diff_$length_unit,\r\n\tnull AS \"SoC\",\r\n\tnull AS \"SoC Diff\",\r\n\tnull AS outside_temp_avg_$temp_unit\r\nFROM updates\r\nWHERE \r\n\t$__timeFilter(start_date)\r\n\tAND car_id = $car_id \r\n\tAND '💾 Update' in ($action_filter)\r\n\r\nORDER BY \"Start\" DESC\r\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "id"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "candata",
          "timeColumn": "datum",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Timeline",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "End": true,
              "start_date_ts": false
            },
            "indexByName": {
              "Action": 2,
              "Duration": 7,
              "End": 1,
              "End Address": 4,
              "SoC": 13,
              "SoC Diff": 14,
              "Start": 0,
              "Start Address": 3,
              "distance_km": 8,
              "distance_mi": 9,
              "end_date_ts": 20,
              "end_path": 18,
              "kWh": 12,
              "odometer_km": 5,
              "odometer_mi": 6,
              "outside_temp_avg_c": 15,
              "outside_temp_avg_f": 16,
              "range_diff_km": 10,
              "range_diff_mi": 11,
              "start_date_ts": 19,
              "start_path": 17
            },
            "renameByName": {
              "action": "",
              "end_address": "End",
              "km_diff": "Km",
              "kwh": "",
              "minutediff": "Time",
              "odometer": "",
              "outside_temp_avg": "Temperature",
              "rangediff": "Range Difference",
              "soc": "",
              "soc_diff": "SoC Difference",
              "start_address": "Start",
              "start_date": "Date",
              "start_date_ts": ""
            }
          }
        }
      ],
      "type": "table"
    }
  ],
  "schemaVersion": 27,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "none",
          "value": "1"
        },
        "datasource": null,
        "definition": "SELECT name AS __text, id AS __value FROM cars;",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Car",
        "multi": false,
        "name": "car_id",
        "options": [],
        "query": "SELECT name AS __text, id AS __value FROM cars;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 5,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "http://localhost:4000",
          "value": "http://localhost:4000"
        },
        "datasource": null,
        "definition": "select base_url from settings limit 1;",
        "description": null,
        "error": null,
        "hide": 2,
        "includeAll": false,
        "label": null,
        "multi": false,
        "name": "base_url",
        "options": [],
        "query": "select base_url from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "selected": true,
          "tags": [],
          "text": [
            "All"
          ],
          "value": [
            "$__all"
          ]
        },
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": true,
        "label": "Action",
        "multi": true,
        "name": "action_filter",
        "options": [
          {
            "selected": true,
            "text": "All",
            "value": "$__all"
          },
          {
            "selected": false,
            "text": "🚗 Drive",
            "value": "🚗 Drive"
          },
          {
            "selected": false,
            "text": "🔋 charges",
            "value": "🔋 charges"
          },
          {
            "selected": false,
            "text": "🅿️ Parking",
            "value": "🅿️ Parking"
          },
          {
            "selected": false,
            "text": "❓ Missing",
            "value": "❓ Missing"
          },
          {
            "selected": false,
            "text": "💾 Update",
            "value": "💾 Update"
          }
        ],
        "query": "🚗 Drive,🔋 charges,🅿️ Parking,❓ Missing,💾 Update",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      },
      {
        "current": {
          "selected": false,
          "text": "",
          "value": ""
        },
        "description": null,
        "error": null,
        "hide": 0,
        "label": "Text Filter",
        "name": "text_filter",
        "options": [
          {
            "selected": true,
            "text": "",
            "value": ""
          }
        ],
        "query": "",
        "skipUrlSync": false,
        "type": "textbox"
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "km",
          "value": "km"
        },
        "datasource": null,
        "definition": "select unit_of_length from settings limit 1;",
        "description": null,
        "error": null,
        "hide": 2,
        "includeAll": false,
        "label": "length unit",
        "multi": false,
        "name": "length_unit",
        "options": [],
        "query": "select unit_of_length from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "C",
          "value": "C"
        },
        "datasource": null,
        "definition": "select unit_of_temperature from settings limit 1;",
        "description": null,
        "error": null,
        "hide": 2,
        "includeAll": false,
        "label": "temperature unit",
        "multi": false,
        "name": "temp_unit",
        "options": [],
        "query": "select unit_of_temperature from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "rated",
          "value": "rated"
        },
        "datasource": null,
        "definition": "select preferred_range from settings limit 1;",
        "description": null,
        "error": null,
        "hide": 2,
        "includeAll": false,
        "label": null,
        "multi": false,
        "name": "preferred_range",
        "options": [],
        "query": "select preferred_range from settings limit 1;",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "time": {
    "from": "now-90d",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Timeline",
  "uid": "SUBgwtigz",
  "version": 37
}