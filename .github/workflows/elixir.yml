name: Elixir CI & PR images

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build images (only if pull_request)
    if: github.event_name == 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "linux/amd64"
            runs_on: "ubuntu-latest"
            cache_id: amd64
          - platform: "linux/arm/v7"
            runs_on: "buildjet-2vcpu-ubuntu-2204-arm"
            cache_id: arm
          - platform: "linux/arm64"
            runs_on: "buildjet-2vcpu-ubuntu-2204-arm"
            cache_id: arm64
    runs-on: ${{ matrix.runs_on }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.version=${{ github.ref || github.ref_name }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  lint:
    name: Lint (Elixir ${{ matrix.elixir }} / OTP ${{ matrix.otp }})
    runs-on: ubuntu-20.04

    permissions:
      contents: read

    strategy:
      matrix:
        include:
          - elixir: "1.15"
            otp: "26"
            lint: true

    steps:
      - uses: actions/checkout@v3

      - uses: erlef/setup-beam@v1
        id: beam
        with:
          otp-version: ${{ matrix.otp }}
          elixir-version: ${{ matrix.elixir }}

      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v3
        env:
          cache-name: cache-elixir-deps
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-

      - name: Cache compiled build
        id: cache-build
        uses: actions/cache@v3
        env:
          cache-name: cache-compiled-dev-build
        with:
          path: |
            _build
            priv/cldr/locales
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-

      - name: Clean to rule out incremental build as a source of flakiness
        if: github.run_attempt > 3
        run: |
          mix deps.clean --all
          mix clean
        shell: sh

      - name: Restore PLT cache
        id: plt_cache
        uses: actions/cache/restore@v3
        with:
          key: |
            ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
          restore-keys: |
            ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
          path: |
            priv/plts

      - name: Install dependencies
        run: mix deps.get

      - name: Compile without warnings
        run: mix compile --warnings-as-errors

      - name: Verify that POT files are up to date
        run: mix gettext.extract --check-up-to-date

      - name: Spell check
        uses: crate-ci/typos@master

      - name: Check formatting
        run: mix format --check-formatted

      - name: Check unused dependencies
        run: mix deps.unlock --check-unused

      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

      - name: Save PLT cache
        id: plt_cache_save
        uses: actions/cache/save@v3
        if: steps.plt_cache.outputs.cache-hit != 'true'
        with:
          key: |
            ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
          path: |
            priv/plts

      - name: Run dialyzer
        run: mix dialyzer --format github

  test:
    name: Test (Elixir ${{ matrix.elixir }} / OTP ${{ matrix.otp }})
    runs-on: ubuntu-20.04

    permissions:
      contents: read

    strategy:
      matrix:
        include:
          - elixir: "1.15"
            otp: "26"
            report_coverage: true

    services:
      db:
        image: postgres:15
        ports: [ "5432:5432" ]
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      MIX_ENV: test
      ELIXIR_ASSERT_TIMEOUT: 1000

    steps:
      - uses: actions/checkout@v3

      - uses: erlef/setup-beam@v1
        id: beam
        with:
          otp-version: ${{ matrix.otp }}
          elixir-version: ${{ matrix.elixir }}

      - name: Cache deps
        id: cache-deps
        uses: actions/cache@v3
        env:
          cache-name: cache-elixir-deps
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-

      - name: Cache compiled build
        id: cache-build
        uses: actions/cache@v3
        env:
          cache-name: cache-compiled-test-build
        with:
          path: |
            _build
            priv/cldr/locales
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-

      - name: Clean to rule out incremental build as a source of flakiness
        if: github.run_attempt > 3
        run: |
          mix deps.clean --all
          mix clean
        shell: sh

      - name: Install dependencies
        run: mix deps.get

      - name: Compile
        run: mix compile

      - name: Run tests
        run: mix test --warnings-as-errors

      - name: Check Coverage
        if: github.ref == 'refs/heads/master' && matrix.report_coverage
        run: mix coveralls.github
        continue-on-error: true
